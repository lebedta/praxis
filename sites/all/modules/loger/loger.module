<?php


/**
 * Implements hook_entity_info().
 */
function loger_entity_info() {
    $loger_entity_info['log'] = array(
        'label' => t('Log'),
        'entity class' => 'Log',
        'controller class' => 'LogController',
        'base table' => 'log_table',
        'fieldable' => FALSE,
        'entity keys' => array(
            'id' => 'lid',
        ),
        'uri callback' => 'entity_class_uri',
        'load hook' => 'log_load',
        'static cache' => TRUE,

        'module' => 'loger',
//        'access callback' => 'log_access_callback',

    );

    return $loger_entity_info;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function loger_block_info() {
    $blocks['loger_block'] = array(
        'info' => t('Logger block')
    );
    return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function loger_block_view($delta = '') {
    // The $delta parameter tells us which block is being requested.
    switch ($delta) {
        case 'loger_block':
            // The subject is displayed at the top of the block. Note that it
            // should be passed through t() for translation. The title configured
            // for the block using Drupal UI supercedes this one.
            $block['subject'] = t('Actions log');
            // The content of the block is typically generated by calling a custom
            // function.
            $block['content'] = log_block_contents($delta);
            break;
    }
    return $block;
}

function log_block_contents($delta){
    $query = db_select('log_table', 'l');
    $query->innerJoin('node_type', 'nt', 'l.type = nt.type');
    $query->innerJoin('users', 'u', 'l.uid = u.uid');
    $query->fields('l');
    $query->fields('u', array('name'));
    $query->fields('nt', array('name'));
    $query->range(0, 3);
    $query->groupBy('nid, uid, title, type, action');
    $query->groupBy("DATE_FORMAT(date,'%Y-%m-%d %H:%i')");
    $query->orderBy('l.date', 'DESC');
    $res = $query->execute();
    $items = array();
    for($i = 0; $i<$res->rowCount(); $i++){
        $items[] = $res->fetchAssoc();
    }

    $output = theme('loger_block', array('items' => $items));
    return $output;
}

/**
 * Implements hook_menu().
 */
function loger_menu() {
    $items = array();

    $items['logger'] = array(
        'title' => 'Activity log',
        'page callback' => 'log_page',
        'access callback' => 'user_log_access',
    );

    return $items;
}

function user_log_access(){
    global $user;
    return isset($user->roles[2]);
}

function log_page(){
    return drupal_get_form('log_page_form');
}

function log_page_form($form, &$form_state){
    $form['pager'] = array('#theme' => 'pager');

    $header = array(
        'lid' => t('ID'),
        'title' => t('Title'),
        'type' => t('Type'),
        'user' => t('User'),
        'action' => t('Action'),
        'date' => t('Date'),
    );

    $query = db_select('log_table', 'l');
    $query->innerJoin('node_type', 'nt', 'l.type = nt.type');
    $query->innerJoin('users', 'u', 'l.uid = u.uid');
    $query->fields('l');
    $query->fields('u', array('name'));
    $query->fields('nt', array('name'));
    $query->orderBy('l.date', 'DESC');
    $query->groupBy('nid, uid, title, type, action');
    $query->groupBy("DATE_FORMAT(date,'%Y-%m-%d %H:%i')");
    $query->extend('PagerDefault')->limit(50);
    $res = $query->execute()->fetchAllAssoc('lid');
    $logs = array();
    foreach($res as $item){
        $logs['log-'.$item->lid] = array(
           'lid' => $item->lid,
           'title' => $item->title,
           'type' => $item->nt_name,
           'user' => $item->name,
           'action' => $item->action,
           'date' => $item->date,
        );
    }

    $form['entities'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $logs,
        '#attributes' => array('class' => array('entity-sort-table')),
        '#empty' => t('There are no log records.'),
    );

    return $form;
}


/**
 * Implements hook_theme().
 */
function loger_theme() {
    return array(
        'loger_block' => array(
            'template' => 'loger_block',
            'variables' => array('items' => array()),
        ),
    );
}



/**
 * Saves Lawmaker to database.
 */
function log_save(Log $log) {
    return $log->save();
}


/**
 * ems custom entity class.
 */
class Log extends Entity {
    /**
     * Override defaultUri().
     */
    protected function defaultUri() {
        return array('path' => 'log/' . $this->identifier());
    }
}

/**
 * Menu autoloader for /ems.
 */
function log_load($log_id, $reset = FALSE) {
    $logs = log_load_multiple(array($log_id), array(), $reset);
    return reset($logs);
}

/**
 * Load multiple ems based on certain conditions.
 */
function log_load_multiple($log_ids = array(), $conditions = array(), $reset = FALSE) {
    return entity_load('log', $log_ids, $conditions, $reset);
}

/**
 * Deletes a lawmaker.
 */
function log_delete(Log $log) {
    $log->delete();
}

/**
 * Delete multiple ems.
 */
function log_delete_multiple(array $log_ids) {
    entity_get_controller('log')->delete($log_ids);
}

/**
 * Custom controller for the ems Doctor.
 */
class LogController extends EntityAPIController {

    /**
     * Override the save method.
     */
    public function save($entity, DatabaseTransaction $transaction = NULL) {
        if (isset($entity->is_new)) {
            $entity->created = REQUEST_TIME;
        }

        $entity->changed = REQUEST_TIME;
        return parent::save($entity, $transaction);
    }
}

/** Node action hooks */

function loger_node_insert($node){
    global $user;
    $log = new Log(array(), 'log');
    $log->nid = $node->nid;
    $log->title = $node->title;
    $log->type = $node->type;
    $log->uid = $user->uid;
    $log->date = date('Y-m-d H:i:s');
    $log->action = 'create';
    $log->save();
}

function loger_node_update($node){
    global $user;
    $log = new Log(array(), 'log');
    $log->nid = $node->nid;
    $log->title = $node->title;
    $log->type = $node->type;
    $log->uid = $user->uid;
    $log->date = date('Y-m-d H:i:s');
    $log->action = 'update';
    $log->save();
}

function loger_node_delete($node){
    global $user;
    $log = new Log(array(), 'log');
    $log->nid = $node->nid;
    $log->title = $node->title;
    $log->type = $node->type;
    $log->uid = $user->uid;
    $log->date = date('Y-m-d H:i:s');
    $log->action = 'delete';
    $log->save();
}
