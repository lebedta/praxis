<?php

/**
 * @file
 * ems.module
 */

variable_set('shortcut_max_slots', 100);
// 50 items per page.
define('TOTAL_ITEMS_PER_PAGE', 50);

// Admin uri links.
define('ADMIN_CONTENT_DOCTOR_MANAGE_URI', 'admin/content/doctor/manage/');
define('ADMIN_CONTENT_DOCTOR_URI', 'admin/content/doctors');

function ems_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
    // Remove Notfall role from edit user form
    foreach (user_roles() as $rid => $name) {
        if ($name == 'Notfal doctor') {
            unset($form['account']['roles']['#options'][$rid]);
        }
    }
}
/**
 * Alters user_register_form
 */
function ems_form_user_register_form_alter(&$form, &$form_state, $form_id) {
    if(isset($form['account']['roles'])){
        // Remove Notfall role from edit user form
        foreach (user_roles() as $rid => $name) {
            if ($name == 'Notfal doctor') {
                unset($form['account']['roles']['#options'][$rid]);
            }
        }
    }
}

function ems_user_login(&$edit, $account){
//    if ($account->access == "0" and isset($account->roles[4])){
    if (isset($account->roles[5])){
        $edit['redirect'] = 'ems/services';
    }
}

function ems_user_insert(&$edit, $account, $category) {
//    if (isset($account->roles[5])){
//        $query = new EntityFieldQuery();
//        $query
//            ->entityCondition('entity_type', 'doctor');
//        $query->propertyCondition('uid', $account->uid, '=');
//        $res = $query->execute();
//        if (count($res) == 0){
//            $doctor = new Doctor(array(), 'doctor');
//            $doctor->uid = $account->uid;
//            $doctor->title = $account->name;
//            $doctor->email = $account->mail;
//            $doctor->save();
//        }
//    }
}

function ems_user_update(&$edit, $account, $category){
//    if (isset($account->roles[5])){
//        $query = new EntityFieldQuery();
//        $query
//            ->entityCondition('entity_type', 'doctor');
//        $query->propertyCondition('uid', $account->uid, '=');
//        $doctors = $query->execute();
//        if (count($doctors)==0){
//            $doctor = new Doctor(array(), 'doctor');
//            $doctor->uid = $account->uid;
//            $doctor->title = $account->name;
//            $doctor->email = $account->mail;
//            $doctor->save();
//        }
//    }
}

/**
 * Implements hook_entity_info().
 */
function ems_entity_info() {
    $ems_entity_info['doctor'] = array(
        'label' => t('Doctor'),
        'label callback' => 'doctor_label_callback',
        'entity class' => 'Doctor',
        'controller class' => 'DoctorController',
        'base table' => 'doctor',
//        'uri callback' => 'doctor_uri',
        'fieldable' => FALSE,
        'entity keys' => array(
            'id' => 'did',
        ),
        'uri callback' => 'entity_class_uri',
        'load hook' => 'doctor_load',
        'static cache' => TRUE,

        'module' => 'ems',
        'access callback' => 'doctor_access_callback',

    );

    $ems_entity_info['service'] = array(
        'label' => t('Service'),
        'entity class' => 'Service',
        'controller class' => 'ServiceController',
        'base table' => 'service',
        'fieldable' => FALSE,
        'entity keys' => array(
            'id' => 'sid',
        ),
        'uri callback' => 'entity_class_uri',
        'load hook' => 'service_load',
        'static cache' => TRUE,
        'module' => 'ems',
        'access callback' => 'service_access_callback',
    );

    return $ems_entity_info;
}

function ems_mail ($key, &$message, $params) {
    global $base_url;
    switch ($key) {
        case 'register':
            // Set headers etc

            $message['subject'] = t('New EMS registration');
            $message['body'][] = "You have new EMS registration";
            break;
        case 'service_create':
            $message['subject'] = t('New EMS service');
            $message['body'][] = "Notfal doctor {$params['doctor']->first_name} {$params['doctor']->last_name} submitted dates: from {$params['service']->start} to {$params['service']->end}.\nFollow the link to conform or decline: {$base_url}/admin/content/service/{$params['service']->sid}/edit.";
            break;
        case 'service_approved':
            $message['subject'] = t('Your EMS service reviewed');
            $action = $params['service']->status == 1 ? "approved" : "declined";
            $message['body'][] = "You service (from {$params['service']->start} to {$params['service']->end}) was {$action} with reason: {$params['service']->description}";
            break;
    }
}

function ems_get_users_by_rolename($rolename){
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'user');
    $query->addTag('rolequery');
    $query->addMetaData('rolename', $rolename);

    return $query->execute();
}

function ems_query_rolequery_alter(QueryAlterableInterface $query) {
    $rolename = $query->getMetaData('rolename');

    $role_subquery = db_select("role", "role");
    $role_subquery->condition('role.name', $rolename, '=');
    $role_subquery->join('users_roles', "users_to_include", "role.rid = users_to_include.rid");
    $role_subquery->fields('users_to_include', array('uid' => 'uid'));
    $role_subquery->where('users_to_include.uid = users.uid');
    $query->exists($role_subquery);
}

/**
 * Implements hook_menu().
 */
function ems_menu() {
    $items = array();

    $items['ems/register'] = array(
        'title' => 'Register',
        'page callback' => 'register',
        'file' => 'includes/pages.inc',
        'access arguments' => array('access content'),
    );

    $items['admin/content/doctors'] = array(
        'title' => "Notfall Doctors",
        'path' => 'admin/content/doctors',
        'file' => 'includes/doctor.admin.inc',
        'page callback' => 'doctors_page',
        'access arguments' => array('administer ems entities'),
        'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    );

    $items['admin/content/services'] = array(
        'title' => "Notfall Services",
        'path' => 'admin/content/services',
        'file' => 'includes/service.admin.inc',
        'page callback' => 'services_page',
        'access arguments' => array('administer ems entities'),
        'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    );

    $items['admin/content/doctors/%'] = array(
        'title' => 'Edit',
        'page callback' => 'doctor_services_page',
        'page arguments' => array(3),
        'access arguments' => array('access content'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 0,
        'file' => 'includes/service.admin.inc',
    );

    $items['admin/content/doctors/%/edit'] = array(
        'title' => 'Edit',
        'page callback' => 'doctor_edit_page',
        'page arguments' => array(3),
        'access arguments' => array('access content'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 0,
        'file' => 'includes/doctor.admin.inc',
    );

    $items['admin/content/service/%/edit'] = array(
        'title' => 'Edit',
        'page callback' => 'service_edit_page',
        'page arguments' => array(3),
        'access arguments' => array('edit ems entities'),
        'type' => MENU_CALLBACK,
        'weight' => 0,
        'file' => 'includes/service.admin.inc',
    );

    $items['ems/ajax/service/status'] = array(
        'file' => 'includes/ajax.inc',
        'page callback' => 'service_status',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'delivery callback' => 'ajax_deliver'
    );

    $items['ems/services'] = array(
        'title' => 'Services',
        'page callback' => 'ems_user_page',
        'access arguments' => array('access content'),
        'access callback' => 'user_service_access',
        'file' => 'includes/pages.inc',
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'main-menu'
    );

    return $items;
}

function user_service_access() {
    global $user;
    return isset($user->roles[5]);
}

/**
 * Implements hook_permission().
 */
function ems_permission() {
    return array(
        'administer ems entities' => array(
            'title' => t('Administer ems Entities'),
            'description' => t('Allows a user to administer lawmaker entities'),
        ),
        'view ems entities' => array(
            'title' => t('View ems Entity'),
            'description' => t('Allows a user to view the ems entities.'),
        ),
        'create ems entities' => array(
            'title' => t('Create ems Entities'),
            'description' => t('Allows a user to create ems entities.'),
        ),
        'edit ems entities' => array(
            'title' => t('Edit ems Entities'),
            'description' => t('Allows a user to edit ems entities.'),
        ),
        'delete ems entities' => array(
            'title' => t('Delete ems Entities'),
            'description' => t('Allows a user to delete ems entities.'),
        ),
        'change ems status' => array(
            'title' => t('Delete ems Entities'),
            'description' => t('Allows a user to delete ems entities.'),
        ),
    );
}

/**
 * Check access permission for ems Entity UI.
 */
function ems_access_menu_callback($op, $ems = NULL, $account = NULL) {
    switch ($op) {
        case 'view':
            return user_access('view ems entities', $account);

        case 'create':
            return user_access('create ems entities', $account);

        case 'update':
            return user_access('edit ems entities', $account);

        case 'delete':
            return user_access('delete ems entities', $account);
    }

    return FALSE;
}

/**
 * ems access callback.
 */
function doctor_access_callback($op, $profile = NULL, $account = NULL) {
    return user_access('administer ems entities', $account);
}

function service_access_callback($op, $profile = NULL, $account = NULL) {
    return user_access('administer ems entities', $account);
}

/**
 * Implements hook_theme().
 */
function ems_theme() {
    return array(
        'ems_user_page' => array(
            'template' => 'ems_user_page',
            'variables' => array('doctor' => array(), 'form'=> array(), 'services'=>array() ),
        ),
        'ems_doctor_services_page' => array(
            'template' => 'ems_doctor_services_page',
            'variables' => array('doctor' => array(), 'services'=>array() ),
        ),
        'services' => array(
            'template' => 'services',
            'variables' => array('form' => array()),
        ),
        'status_part' => array(
            'template' => 'status_part',
            'variables' => array('status' => null, 'id' => null, 'statuses'=>array(), 'class' => 'status-change' ),
        ),
        'edit_service' => array(
            'template' => 'edit_service',
            'variables' => array('form' => array(), 'doctor' => array(), 'service' => array() ),
        )
    );
}

/**
 * Helper function for custom queries.
 */
function ems_entity_query($conditions = array()) {

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'ems');

    // Apply conditions.
    foreach ($conditions as $key => $value) {
        $query->propertyCondition($key, $value);
    }

    $result = $query->execute();

    if (isset($result['ems'])) {
        $ems = array_keys($result['ems']);
    }
    else {
        $ems = array();
    }

    return $ems;
}

/**
 * Label callback for ems entities, for menu router, etc.
 */
function doctor_label_callback($doctor, $type) {
    return empty($doctor->first_name) ? 'Untitled Doctor' : $doctor->first_name . " " . $doctor->last_name;
}

/**
 * Saves Lawmaker to database.
 */
function doctor_save(Doctor $doctor) {
    return $doctor->save();
}

/**
 * View for /ems/<ems_id> page.
 */
function ems_view_entity($ems) {
    $fullname = $ems->firstname . ' ' . $ems->lastname;
    drupal_set_title($fullname);
    // Path not entity.
    $ems_output = theme('ems_full', array('ems' => $ems));
    return $ems_output;
}

/**
 * ems custom entity class.
 */
class Doctor extends Entity {
    /**
     * Override defaultUri().
     */
    protected function defaultUri() {
        return array('path' => 'doctor/' . $this->identifier());
    }
}

/**
 * Menu autoloader for /ems.
 */
function doctor_load($doc_id, $reset = FALSE) {
    $doctors = doctor_load_multiple(array($doc_id), array(), $reset);
    return reset($doctors);
}

/**
 * Load multiple ems based on certain conditions.
 */
function doctor_load_multiple($doc_ids = array(), $conditions = array(), $reset = FALSE) {
    return entity_load('doctor', $doc_ids, $conditions, $reset);
}

/**
 * Deletes a lawmaker.
 */
function doctor_delete(Doctor $doctor) {
    $doctor->delete();
}

/**
 * Delete multiple ems.
 */
function doctor_delete_multiple(array $doc_ids) {
    entity_get_controller('doctor')->delete($doc_ids);
}

/**
 * Custom controller for the ems Doctor.
 */
class DoctorController extends EntityAPIController {

    /**
     * Override the save method.
     */
    public function save($entity, DatabaseTransaction $transaction = NULL) {
        if (isset($entity->is_new)) {
            $entity->created = REQUEST_TIME;
        }

        $entity->changed = REQUEST_TIME;
        return parent::save($entity, $transaction);
    }
}


/********************************************** */
/*********** Service entity  ********************/
/********************************************** */

/**
 * Saves Service to database.
 */
function service_save(Service $service) {
    return $service->save();
}

/**
 * ems custom entity class.
 */
class Service extends Entity {
    /**
     * Override defaultUri().
     */
    protected function defaultUri() {
        return array('path' => 'service/' . $this->identifier());
    }
}

/**
 * Menu autoloader for /ems.
 */
function service_load($s_id, $reset = FALSE) {
    $services = service_load_multiple(array($s_id), array(), $reset);
    return reset($services);
}

/**
 * Load multiple ems based on certain conditions.
 */
function service_load_multiple($s_ids = array(), $conditions = array(), $reset = FALSE) {
    return entity_load('service', $s_ids, $conditions, $reset);
}

/**
 * Deletes a lawmaker.
 */
function service_delete(Service $service) {
    $service->delete();
}

/**
 * Delete multiple ems.
 */
function service_delete_multiple(array $s_ids) {
    entity_get_controller('service')->delete($s_ids);
}
/**
 * Custom controller for the ems Service.
 */
class ServiceController extends EntityAPIController {

    /**
     * Override the save method.
     */
    public function save($entity, DatabaseTransaction $transaction = NULL) {
        if (isset($entity->is_new)) {
            $entity->created = REQUEST_TIME;
        }

        $entity->changed = REQUEST_TIME;
        return parent::save($entity, $transaction);
    }
}

function rangeToString( $from,  $to){
    $from = explode(',', date('d,F,Y', strtotime($from)));
    $to = explode(',', date('d,F,Y', strtotime($to)));
    if ($from[2] == $from[2]){
        if ($from[1] == $to[1]){
            $str = "{$from[1]} {$from[0]} - {$to[0]}, {$from[2]}";
        }
        else{
            $str = "{$from[1]} {$from[0]} - {$to[1]} {$to[0]}, {$from[2]}";
        }
    }
    else{
        $str = "{$from[1]} {$from[0]} {$from[2]} - {$to[1]} {$to[0]} {$to[2]}";
    }
    return $str;
}